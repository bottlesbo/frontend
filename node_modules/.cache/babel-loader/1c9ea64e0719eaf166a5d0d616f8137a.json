{"ast":null,"code":"import _toConsumableArray from\"/home/father/bookstore/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/father/bookstore/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{useAppSelector}from'../../../../store';import useQuery from'../../../../utils/useQuery';import GenreCheckboxWrapper from'../styles/GenresCheckbox.styles';import arrowUpIcon from'../../../images/arrow-up.png';import checkedIcon from'../../../images/checkbox-checked.png';import unchekedIcon from'../../../images/checkbox-unchecked.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GenresCheckbox=function GenresCheckbox(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),checkedGenres=_useState2[0],setCheckedGenres=_useState2[1];var _useQuery=useQuery(),_useQuery2=_slicedToArray(_useQuery,2),parsedParams=_useQuery2[0],setParams=_useQuery2[1];var genres=useAppSelector(function(state){return state.genreReducer.genres;});useEffect(function(){if(parsedParams.genres){var genresFromQuery=parsedParams.genres.split(',');if(genresFromQuery.length!==0){setCheckedGenres(genresFromQuery);}}},[parsedParams.genres]);var updateFilterQuery=function updateFilterQuery(genres){parsedParams.genres=genres.toString();setParams(parsedParams);};var getValues=function getValues(e){var checkedGenreId=e.target.value;var filteredGenres=[];if(checkedGenres.includes(checkedGenreId)){filteredGenres=checkedGenres.filter(function(genre){return genre!==checkedGenreId;});}else{filteredGenres=[].concat(_toConsumableArray(checkedGenres),[checkedGenreId]);}updateFilterQuery(filteredGenres);setCheckedGenres(filteredGenres);};return/*#__PURE__*/_jsxs(GenreCheckboxWrapper,{children:[/*#__PURE__*/_jsx(\"img\",{src:arrowUpIcon,className:\"genres-checkbox__arrow-up\"}),/*#__PURE__*/_jsx(\"div\",{className:\"genres-checkbox__wrapper\",onClick:function onClick(e){e.stopPropagation();},children:genres.map(function(genre){return/*#__PURE__*/_jsx(\"label\",{htmlFor:genre.genreId.toString(),children:/*#__PURE__*/_jsxs(\"div\",{className:\"genres-checkbox__option\",children:[/*#__PURE__*/_jsx(\"input\",{id:genre.genreId.toString(),type:\"checkbox\",name:genre.name,value:genre.genreId,checked:checkedGenres.includes(\"\".concat(genre.genreId)),onChange:getValues,hidden:true}),checkedGenres.includes(\"\".concat(genre.genreId))?/*#__PURE__*/_jsx(\"img\",{className:\"genres-checkbox__icon\",src:checkedIcon}):/*#__PURE__*/_jsx(\"img\",{className:\"genres-checkbox__icon\",src:unchekedIcon}),genre.name]},genre.genreId)},genre.genreId);})})]});};export default GenresCheckbox;","map":{"version":3,"names":["React","useEffect","useState","useAppSelector","useQuery","GenreCheckboxWrapper","arrowUpIcon","checkedIcon","unchekedIcon","GenresCheckbox","checkedGenres","setCheckedGenres","parsedParams","setParams","genres","state","genreReducer","genresFromQuery","split","length","updateFilterQuery","toString","getValues","e","checkedGenreId","target","value","filteredGenres","includes","filter","genre","stopPropagation","map","genreId","name"],"sources":["/home/father/bookstore/frontend/src/ui/pages/home/components/GenresCheckbox.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { useAppSelector } from '../../../../store';\nimport { QuerySearchOptions } from '../../../../types';\nimport useQuery from '../../../../utils/useQuery';\n\nimport GenreCheckboxWrapper from '../styles/GenresCheckbox.styles';\n\nimport arrowUpIcon from '../../../images/arrow-up.png';\nimport checkedIcon from '../../../images/checkbox-checked.png';\nimport unchekedIcon from '../../../images/checkbox-unchecked.png';\n\nconst GenresCheckbox = () => {\n  const [checkedGenres, setCheckedGenres] = useState<string[]>([]);\n  const [parsedParams, setParams] = useQuery<QuerySearchOptions>();\n  const genres = useAppSelector((state) => state.genreReducer.genres);\n\n  useEffect(() => {\n    if (parsedParams.genres) {\n      const genresFromQuery = parsedParams.genres.split(',');\n\n      if (genresFromQuery.length !== 0) {\n        setCheckedGenres(genresFromQuery);\n      }\n    }\n  }, [parsedParams.genres]);\n\n  const updateFilterQuery = (genres: string[]) => {\n    parsedParams.genres = genres.toString();\n    setParams(parsedParams);\n  };\n\n  const getValues = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const checkedGenreId = e.target.value;\n    let filteredGenres: string[] = [];\n\n    if (checkedGenres.includes(checkedGenreId)) {\n      filteredGenres = checkedGenres.filter((genre) => {\n        return genre !== checkedGenreId;\n      });\n    } else {\n      filteredGenres = [...checkedGenres, checkedGenreId];\n    }\n\n    updateFilterQuery(filteredGenres);\n    setCheckedGenres(filteredGenres);\n  };\n\n  return (\n    <GenreCheckboxWrapper >\n      <img\n        src={arrowUpIcon}\n        className=\"genres-checkbox__arrow-up\"\n      />\n      <div\n        className=\"genres-checkbox__wrapper\"\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        {genres.map((genre) => {\n          return (\n            <label htmlFor={genre.genreId.toString()} key={genre.genreId}>\n              <div\n                key={genre.genreId}\n                className=\"genres-checkbox__option\"\n              >\n                <input\n                  id={genre.genreId.toString()}\n                  type=\"checkbox\"\n                  name={genre.name}\n                  value={genre.genreId}\n                  checked={checkedGenres.includes(`${genre.genreId}`)}\n                  onChange={getValues}\n                  hidden\n                />\n                {checkedGenres.includes(`${genre.genreId}`)\n                  ? (<img\n                    className=\"genres-checkbox__icon\"\n                    src={checkedIcon}\n                  />)\n                  : (<img\n                    className=\"genres-checkbox__icon\"\n                    src={unchekedIcon}\n                  />)\n                }\n                {genre.name}\n              </div>\n            </label>\n          );\n        })}\n      </div>\n    </GenreCheckboxWrapper>\n  );\n};\n\nexport default GenresCheckbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}