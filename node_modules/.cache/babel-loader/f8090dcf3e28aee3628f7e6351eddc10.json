{"ast":null,"code":"var _jsxFileName = \"/home/father/bookstore/frontend/src/ui/pages/home/components/GenresCheckbox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../../../store';\nimport useQuery from '../../../../utils/useQuery';\nimport GenreCheckboxWrapper from '../styles/GenresCheckbox.styles';\nimport arrowUpIcon from '../../../images/arrow-up.png';\nimport checkedIcon from '../../../images/checkbox-checked.png';\nimport unchekedIcon from '../../../images/checkbox-unchecked.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GenresCheckbox = () => {\n  _s();\n\n  const [checkedGenres, setCheckedGenres] = useState([]);\n  const [parsedParams, setParams] = useQuery();\n  const genres = useAppSelector(state => state.genreReducer.genres);\n  useEffect(() => {\n    if (parsedParams.genres) {\n      const genresFromQuery = parsedParams.genres.split(',');\n\n      if (genresFromQuery.length !== 0) {\n        setCheckedGenres(genresFromQuery);\n      }\n    }\n  }, [parsedParams.genres]);\n\n  const updateFilterQuery = genres => {\n    parsedParams.genres = genres.toString();\n    setParams(parsedParams);\n  };\n\n  const getValues = e => {\n    const checkedGenreId = e.target.value;\n    let filteredGenres = [];\n\n    if (checkedGenres.includes(checkedGenreId)) {\n      filteredGenres = checkedGenres.filter(genre => {\n        return genre !== checkedGenreId;\n      });\n    } else {\n      filteredGenres = [...checkedGenres, checkedGenreId];\n    }\n\n    updateFilterQuery(filteredGenres);\n    setCheckedGenres(filteredGenres);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GenreCheckboxWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: arrowUpIcon,\n      className: \"genres-checkbox__arrow-up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genres-checkbox__wrapper\",\n      onClick: e => {\n        e.stopPropagation();\n      },\n      children: genres.map(genre => {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: genre.genreId.toString(),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"genres-checkbox__option\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: genre.genreId.toString(),\n              type: \"checkbox\",\n              name: genre.name,\n              value: genre.genreId,\n              checked: checkedGenres.includes(`${genre.genreId}`),\n              onChange: getValues,\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), checkedGenres.includes(`${genre.genreId}`) ? /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"genres-checkbox__icon\",\n              src: checkedIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 22\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"genres-checkbox__icon\",\n              src: unchekedIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 22\n            }, this), genre.name]\n          }, genre.genreId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, genre.genreId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GenresCheckbox, \"viM3qulEpR78IYO/6ajIW52cjrc=\", false, function () {\n  return [useQuery, useAppSelector];\n});\n\n_c = GenresCheckbox;\nexport default GenresCheckbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenresCheckbox\");","map":{"version":3,"names":["React","useEffect","useState","useAppSelector","useQuery","GenreCheckboxWrapper","arrowUpIcon","checkedIcon","unchekedIcon","GenresCheckbox","checkedGenres","setCheckedGenres","parsedParams","setParams","genres","state","genreReducer","genresFromQuery","split","length","updateFilterQuery","toString","getValues","e","checkedGenreId","target","value","filteredGenres","includes","filter","genre","stopPropagation","map","genreId","name"],"sources":["/home/father/bookstore/frontend/src/ui/pages/home/components/GenresCheckbox.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { useAppSelector } from '../../../../store';\nimport { QuerySearchOptions } from '../../../../types';\nimport useQuery from '../../../../utils/useQuery';\n\nimport GenreCheckboxWrapper from '../styles/GenresCheckbox.styles';\n\nimport arrowUpIcon from '../../../images/arrow-up.png';\nimport checkedIcon from '../../../images/checkbox-checked.png';\nimport unchekedIcon from '../../../images/checkbox-unchecked.png';\n\nconst GenresCheckbox = () => {\n  const [checkedGenres, setCheckedGenres] = useState<string[]>([]);\n  const [parsedParams, setParams] = useQuery<QuerySearchOptions>();\n  const genres = useAppSelector((state) => state.genreReducer.genres);\n\n  useEffect(() => {\n    if (parsedParams.genres) {\n      const genresFromQuery = parsedParams.genres.split(',');\n\n      if (genresFromQuery.length !== 0) {\n        setCheckedGenres(genresFromQuery);\n      }\n    }\n  }, [parsedParams.genres]);\n\n  const updateFilterQuery = (genres: string[]) => {\n    parsedParams.genres = genres.toString();\n    setParams(parsedParams);\n  };\n\n  const getValues = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const checkedGenreId = e.target.value;\n    let filteredGenres: string[] = [];\n\n    if (checkedGenres.includes(checkedGenreId)) {\n      filteredGenres = checkedGenres.filter((genre) => {\n        return genre !== checkedGenreId;\n      });\n    } else {\n      filteredGenres = [...checkedGenres, checkedGenreId];\n    }\n\n    updateFilterQuery(filteredGenres);\n    setCheckedGenres(filteredGenres);\n  };\n\n  return (\n    <GenreCheckboxWrapper >\n      <img\n        src={arrowUpIcon}\n        className=\"genres-checkbox__arrow-up\"\n      />\n      <div\n        className=\"genres-checkbox__wrapper\"\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        {genres.map((genre) => {\n          return (\n            <label htmlFor={genre.genreId.toString()} key={genre.genreId}>\n              <div\n                key={genre.genreId}\n                className=\"genres-checkbox__option\"\n              >\n                <input\n                  id={genre.genreId.toString()}\n                  type=\"checkbox\"\n                  name={genre.name}\n                  value={genre.genreId}\n                  checked={checkedGenres.includes(`${genre.genreId}`)}\n                  onChange={getValues}\n                  hidden\n                />\n                {checkedGenres.includes(`${genre.genreId}`)\n                  ? (<img\n                    className=\"genres-checkbox__icon\"\n                    src={checkedIcon}\n                  />)\n                  : (<img\n                    className=\"genres-checkbox__icon\"\n                    src={unchekedIcon}\n                  />)\n                }\n                {genre.name}\n              </div>\n            </label>\n          );\n        })}\n      </div>\n    </GenreCheckboxWrapper>\n  );\n};\n\nexport default GenresCheckbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}